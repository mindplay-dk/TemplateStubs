<?php

/**
 * ProcessWire 'TemplateStubs' module
 *
 * @author Rasmus Schultz <http://mindplay.dk/>
 */

/**
 * This module generates 
 */
class TemplateStubs extends WireData implements Module, ConfigurableModule
{
    /**
     * @return array module meta-data
     */
    public static function getModuleInfo()
    {
        return array(
            'title' => 'Template Stubs', 
            'version' => 100, 
            'summary' => 'Generates API stubs for Templates - useful when working with an IDE.',
            'singular' => true, 
            'autoload' => true, 
        );
    }
    
    /**
     * @var string namespace for template-types
     */
    public $namespace = 'tpl';
    
    /**
     * @var (string|Closure)[] hash where field-type class-name => property-type (or function(Field $field) : string)
     */
    public static $return_types;
    
    /**
     * @var string[] list of PHP pseudo-type names
     * @see createStub()
     */
    public static $pseudo_types = array('int','string','float','bool','true','false','array','mixed');
    
    /**
     * @var bool true, if changes were detected that require template stubs to be rebuilt
     */
    protected $must_rebuild = false;
    
    /**
     * Initialize the module
     */
    public function init()
    {
        $module = $this;
        
        self::$return_types = array(
            'FieldtypeComments' => 'CommentArray|Comment[]',
            'FieldtypeRepeater' => 'RepeaterPageArray|Page[]',
            'FieldtypeCheckbox' => 'int',
            'FieldtypeDatetime' => 'int|string',
            'FieldtypeImage' => function (Field $field) {
                return $field->maxFiles == 1
                    ? 'Pageimage'
                    : 'Pageimages|Pageimage[]';
            },
            'FieldtypeFile' => function (Field $field) {
                return $field->maxFiles == 1
                    ? 'Pagefile'
                    : 'Pagefiles|Pagefile[]';
            },
            'FieldtypeFloat' => 'float',
            'FieldtypeInteger' => 'int',
            'FieldtypeModule' => 'string',
            'FieldtypePage' => function (Field $field) use ($module) {
                $pageType = 'Page';
                
                if ($field->template_id) {
                    $template = wire('templates')->get($field->template_id);
                    
                    $pageType = $module->getClassName($template);
                }
                
                switch ($field->derefAsPage) {
                    case FieldtypePage::derefAsPageArray:
                        return "PageArray|{$pageType}[]";
                    case FieldtypePage::derefAsPageOrFalse:
                        return '{$pageType}|false';
                    case FieldtypePage::derefAsPageOrNullPage:
                        return '{$pageType}|NullPage';
                    default:
                        return 'mixed';
                }
            },
            'FieldtypePassword' => 'Password',
            // final fall-back types:
            'FieldtypeText' => 'string',
            'FieldtypeMulti' => 'array',
        );
    }
    
    /**
     * Install hooks (only if the rendered Page is an admin-page)
     */
    public function ready()
    {
        if ($this->page->template == 'admin') {
            // Hooks that raise the $must_rebuild flag:
            $this->addHookAfter('Templates::save', $this, 'mustRebuild');
            $this->addHookAfter('Fields::save', $this, 'mustRebuild');
            
            // Hooks for rebuild() after page-view and/or before redirect:
            $this->addHookBefore('Session::redirect', $this, 'rebuild');
            $this->addHookAfter('ProcessPageView::finished', $this, 'rebuild');
        }
    }

    /**
     * Install the setup menu shortcut
     */
    public function ___install()
    {
        $this->must_rebuild = true;
        
        $this->rebuild();
    }
    
    /**
     * @param Template $template the Template for which to generate a class-name
     * @return string documentation stub class-name (without namespace)
     */
    public function getClassName(Template $template)
    {
        return strtr($template->name, '-', '_');
    }
    
    /**
     * @return string Page property-type for the given Field
     */
    protected function getPropertyType(Field $field)
    {
        $type = $field->type;
        
        foreach (self::$return_types as $field_type => $property_type) {
            if ($type instanceof $field_type) {
                return is_callable($property_type)
                    ? $property_type($field)
                    : $property_type;
            }
        }
        
        return 'mixed';
    }
    
    /**
     * @param Template $template the template for which to generate an API documentation stub
     * @param bool[] hash where keys are class-names
     * @return string PHP stub code (documentation only)
     */
    protected function createStub(Template $template, & $types)
    {
        /**
         * @var InputField $field
         */

        $stub = "/**\n * \"{$template->name}\" template\n *\n";

        foreach ($template->fields as $field) {
            $name = $field->name;
            $property_type = $this->getPropertyType($field);
            
            // index property-type declaration:
            
            preg_match_all('/\w+/', $property_type, $matches);
            
            foreach ($matches[0] as $type) {
                if (! in_array($type, self::$pseudo_types)) {
                    $types[$type] = true;
                }
            }
            
            #$field_type = get_class($field->type);
            
            // create documentation:
            
            $doc = "@property {$property_type} \${$name}";
            $indent = strlen($doc) + 1;
            $width = 80 - $indent;
            
            $description = wordwrap($field->get('description|label|name'), $width, "\n * " . str_repeat(' ', $indent));
            
            $stub .= " * {$doc} {$description}\n";
        }
        
        $class = $this->getClassName($template);

        $stub .= " */\nclass ".$class." extends Page\n{}\n";
        
        return $stub;
    }
    
    /**
     * @return string documentation file output path
     */
    public function getOutputPath()
    {
        return dirname(__FILE__) . DIRECTORY_SEPARATOR . 'stubs.php';
    }
    
    /**
     * Raise a flag that triggers documentation rebuild at the end of the request
     */
    public function mustRebuild(HookEvent $event)
    {
        $this->must_rebuild = true;
    }
    
    /**
     * Rebuild the template stubs
     *
     * @param HookEvent|null $event Event object (unused)
     */
    public function rebuild(HookEvent $event = null)
    {
        /**
         * @var Template $template
         * @var bool[] $stubs hash where keys are class names
         */
        
        if (false === $this->must_rebuild) {
            return; // no changes were made, no rebuild necessary
        }
        
        $time = date('Y-m-d H:i:s');
        
        $docs = '';
        
        $types = array();
        
        foreach (wire('templates') as $template) {
            $docs .= $this->createStub($template, $types) . "\n";
        }
        
        foreach (wire('templates') as $template) {
            // filter template-types from the use-clause:
            unset($types[$this->getClassName($template)]);
        }
        
        $stubs = "<?php\n\n"
            . "/**\n * Generated by TemplateStubs module $time"
            . "\n * This file may be overwritten at any time."
            . "\n */\n\nnamespace {$this->namespace};\n\n";
        
        $stubs .= "use " . implode(', ', array_keys($types)) . ";\n\n";
        
        $stubs .= $docs;
        
        file_put_contents($this->getOutputPath(), $stubs);
        
        $this->must_rebuild = false;
    }
    
    /**
     * Builds the Module configuration form.
     *
     * @param array $data module configuration values
     *
     * @return InputfieldsWrapper|InputfieldWrapper
     */
    static public function getModuleConfigInputfields(array $data)
    {
        $modules = Wire::getFuel('modules');
        
        $fields = new InputfieldWrapper();
        
        // Display information:
        
        $info = wire('modules')->get('InputfieldMarkup');
        
        $output_path = wire('modules')->TemplateStubs->getOutputPath();
        
        $info->markupText = '<h2>TemplateStubs</h2>'
            . '<p>Documentation stubs for Templates will be written to:</p>'
            . '<pre>' . htmlspecialchars($output_path) . '</pre>';
        
        $fields->append($info);

        // Display source-code:
        
        $source = wire('modules')->get('InputfieldMarkup');
        
        $source->markupText = '<h2>Current Source File</h2>'
            . highlight_file($output_path, true);
        
        $fields->append($source);

        return $fields;
    }
}
